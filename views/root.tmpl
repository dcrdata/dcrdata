{{define "home"}}
<!DOCTYPE html>
<html lang="en">

{{ template "html-head"}}

<body>
        <style>
                .wrapper {
                    width: 60%;
                    min-width: 360px;
                }
                .navbar-default .navbar-nav > .open > a, .navbar-default .navbar-nav > .open > a:hover, .navbar-default .navbar-nav > .open > a:focus {
                    background: black;
                }
                    /* Notice: Portions of the connection indicator style come from html5rocks.com */
                    @-webkit-keyframes glowGreen {
                        from {
                            -webkit-box-shadow: rgba(0, 255, 0, 0) 0 0 0;
                        }
                        50% {
                            -webkit-box-shadow: rgba(0, 255, 0, 1) 0 0 10px;
                        }
                        to {
                            -webkit-box-shadow: rgba(0, 255, 0, 0) 0 0 0;
                        }
                    }
                    @-webkit-keyframes glowRed {
                        from {
                            -webkit-box-shadow: rgba(255, 0, 0, 0) 0 0 0;
                        }
                        50% {
                            -webkit-box-shadow: rgba(255, 0, 0, 1) 0 0 10px;
                        }
                        to {
                            -webkit-box-shadow: rgba(255, 0, 0, 0) 0 0 0;
                        }
                    }
                    #connection {
                        top: -1px;
                        font: 12px sans-serif;
                        font-weight: bold;
                        vertical-align: middle;
                        color: silver;
                    }
                    #connection div {
                        background-color: orange;
                        width: 10px;
                        height: 10px;
                        display: inline-block;
                        border-radius: 10px;
                        margin-left: 5px;
                        -webkit-animation-duration: 2s;
                        -webkit-animation-iteration-count: infinite;
                        -webkit-animation-timing-function: linear;
                    }
                    #connection.connected div {
                        background-color: #63df1e;
                        -webkit-box-shadow: rgba(0, 255, 0, 0.5) 0px 0px 5px;
                        -webkit-animation-name: glowGreen;
                    }
                    #connection.disconnected div {
                        background-color: red;
                        -webkit-box-shadow: rgba(255, 0, 0, 0.5) 0px 0px 5px;
                        -webkit-animation-name: glowRed;
                    }
            </style>
    <script type="text/javascript">
        if (!window.DOMTokenList) {
            Element.prototype.containsClass = function(name) {
                return new RegExp("(?:^|\\s+)" + name + "(?:\\s+|$)").test(this.className);
            };
            Element.prototype.addClass = function(name) {
                if (!this.containsClass(name)) {
                var c = this.className;
                this.className = c ? [c, name].join(' ') : name;
                }
            };
            Element.prototype.removeClass = function(name) {
                if (this.containsClass(name)) {
                var c = this.className;
                this.className = c.replace(
                    new RegExp("(?:^|\\s+)" + name + "(?:\\s+|$)", "g"), "");
                }
            };
        }

	    var loc = window.location;
        var uri = 'ws:';
        if (loc.protocol === 'https:') {
            uri = 'wss:';
        }
        uri += '//' + loc.host;
        uri += loc.pathname + 'ws';

        var ws = new MessageSocket(uri);

        ws.registerEvtHandler("open", function() {
            console.log('Connected')
            updateConnectionStatus('Connected', true);
        });

        ws.registerEvtHandler("close", function() {
            console.log('Disconnected')
            updateConnectionStatus('Disconnected', false);
        });

        ws.registerEvtHandler("error", function(evt) {
            console.log("WebSocket error:", evt);
            updateConnectionStatus('Disconnected', false);
        });

        ws.registerEvtHandler("ping", function(evt) {
            console.debug("ping. users online: ", evt)
            ws.send("pong", "copy")
        });

        var updateMempool = function (event) {
            console.log("Received mempoolsstxfeeinfo message", event);
            var m = JSON.parse(event);

            //mempool fee info
            var number = document.getElementById('mempoolfeeinfo_number');
            number.innerHTML = String(m.number);

            var min = document.getElementById('mempoolfeeinfo_min');
            min.innerHTML = m.min.toFixed(8);

            var max = document.getElementById('mempoolfeeinfo_max');
            max.innerHTML = m.max.toFixed(8);

            var median = document.getElementById('mempoolfeeinfo_median');
            median.innerHTML = m.median.toFixed(8);

            var mean = document.getElementById('mempoolfeeinfo_mean');
            mean.innerHTML = m.mean.toFixed(8);

            var lm = document.getElementById('mempoolfeeinfo_lowestmineable');
            lm.innerHTML = m.lowest_mineable.toFixed(8);
        };

        ws.registerEvtHandler("mempoolsstxfeeinfo", updateMempool);

        var updateBlockData = function (event) {
            console.log("Received newblock message", event);
            var newblock = JSON.parse(event);

            // block summary data
            var b = newblock.block;

            var height = document.getElementById('blockheight');
            height.innerHTML = String(b.height);

            var hash = document.getElementById('blockhash');
            hash.innerHTML = b.hash;

            var blockhash = document.getElementById('blocksize');
            blockhash.innerHTML = String(b.size);

            var diff = document.getElementById('blockdiff');
            diff.innerHTML = b.diff.toFixed(2);

            var sdiff = document.getElementById('blocksdiff');
            sdiff.innerHTML = b.sdiff.toFixed(4);

	        var poolsize = document.getElementById('poolsize');
            poolsize.innerHTML = String(b.ticket_pool.size);

            var poolvalue = document.getElementById('poolvalue');
            poolvalue.innerHTML = b.ticket_pool.value.toFixed(2);

            var poolvalavg = document.getElementById('poolvalavg');
            poolvalavg.innerHTML = b.ticket_pool.valavg.toFixed(4);

            // stake
            var s = newblock.stake;

            // var sdiffcurrent = document.getElementById('blocksdiff');
            // sdiffcurrent.innerHTML = String(s.stakediff.current);
            // var sdiffnext = document.getElementById('blocksdiffnext');
            // sdiffnext.innerHTML = String(s.next);

            var sdiffEstimates = s.stakediff.estimates;
            var sdiffmin = document.getElementById('sdiffmin');
            sdiffmin.innerHTML = sdiffEstimates.min.toFixed(2);
            var sdiffmax = document.getElementById('sdiffmax');
            sdiffmax.innerHTML = sdiffEstimates.max.toFixed(2);
            var sdiffexp = document.getElementById('sdiffexp');
            sdiffexp.innerHTML = sdiffEstimates.expected.toFixed(2);

            var window_block_index = document.getElementById('window_block_index');
            window_block_index.innerHTML = String(s.window_block_index);

            var feeinfo = s.feeinfo;
            var feeinfonumber = document.getElementById('feeinfo_number');
            feeinfonumber.innerHTML = String(feeinfo.number);
            var feeinfomin = document.getElementById('feeinfo_min');
            feeinfomin.innerHTML = feeinfo.min.toFixed(8);
            var feeinfomax = document.getElementById('feeinfo_max');
            feeinfomax.innerHTML = feeinfo.max.toFixed(8);
            var feeinfomedian = document.getElementById('feeinfo_median');
            feeinfomedian.innerHTML = feeinfo.median.toFixed(8);
            var feeinfomean = document.getElementById('feeinfo_mean');
            feeinfomean.innerHTML = feeinfo.mean.toFixed(8);
        };

        ws.registerEvtHandler("newblock", updateBlockData);

        setInterval(function () {
            ws.send("ping", 'Hi. I am a client!');
        }, 1000);

	    function updateConnectionStatus(msg, connected) {
            var el = document.getElementById('connection');
            if (el.classList) {
                el.classList.remove('hidden');
            } else {
                el.removeClass('hidden');
            }
            if (connected) {
                if (el.classList) {
                    el.classList.add('connected');
                    el.classList.remove('disconnected');
                } else {
                    el.addClass('connected');
                    el.removeClass('disconnected');
                }
            } else {
                if (el.classList) {
                    el.classList.remove('connected');
                    el.classList.add('disconnected');
                } else {
                    el.removeClass('connected');
                    el.addClass('disconnected');
                }
            }
            el.innerHTML = msg + '<div></div>';
        }

        // function closeConnection() {
        //     ws.close();
        //     updateConnectionStatus('Disconnected', false);
        // }
    </script>

    {{ template "navbar" }}

    <div class="container">

        <h4><span>Chain State</span></h4>
        <div class="row" id="chainbox">
            <div class="col-md-6">
                <strong>Best Block</strong>
                <table class="table table-sm">
                    <tbody>
                        <tr>
                            <td>Height</td>
                            <td><span id="blockheight" class="height">{{.BlockSummary.Height}}</span></td>
                        </tr>
                        <tr>
                            <td>Hash</td>
                            <td>
                                <a href="/explorer/block/{{.BlockSummary.Hash}}" id="blockhash" class="hash collapse">{{.BlockSummary.Hash}}</a>
                            </td>
                        </tr>
                        <tr>
                            <td>Size (bytes)</td>
                            <td><strong id="blocksize" >{{.BlockSummary.Size}}</strong></td>
                        </tr>
                        <tr>
                            <td>Difficulty</td>
                            <td><strong id="blockdiff" >{{printf "%16.2f" .BlockSummary.Difficulty}}</strong></td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="col-md-6 text-left">
                <strong>Ticket Pool</strong>
                <table class="table table-sm">
                    <tbody>
                        <tr>
                            <td>Size</td>
                            <td><strong><span id="poolsize" style="color:#41BF53">{{.BlockSummary.PoolInfo.Size}}</span></strong></td>
                        </tr>
                        <tr>
                            <td>Value (DCR)</td>
                            <td><strong><span id="poolvalue">{{printf "%16.2f" .BlockSummary.PoolInfo.Value}}</span></strong></td>
                        </tr>
                        <tr>
                            <td>Average (DCR/ticket)</td>
                            <td><strong><span id="poolvalavg">{{printf "%16.4f" .BlockSummary.PoolInfo.ValAvg}}</span></strong></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <h4><span>Ticket Price</span></h4>
        <div class="row">
            <div class="col-md-6">
                <strong>Current Price Window</strong>
                <table class="table table-sm">
                    <thead>
                        <th>Ticket Price</th>
                        <th>Progress</th>
                    </thead>
                    <tbody>
                        <tr>
                            <td><span style="color:#61DF13;" id="blocksdiff" ><strong>{{printf "%12.4f" .BlockSummary.StakeDiff}}</strong></span></td>
                            <td id="blocksdiff">block <span id="window_block_index" >{{.StakeSummary.IdxBlockInWindow}}</span> of 144</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="col-md-6">
                <strong>Next Price Window</strong>
                <table class="table table-sm">
                    <thead>
                        <th>Min</th>
                        <th>Max</th>
                        <th>Guess</th>
                    </thead>
                    <tbody>
                        <tr>
                            <td><span id="sdiffmin" >{{printf "%12.2f" .StakeSummary.StakeDiff.Estimates.Min}}</span></td>
                            <td><span id="sdiffmax" >{{printf "%12.2f" .StakeSummary.StakeDiff.Estimates.Max}}</span></td>
                            <td><span id="sdiffexp" >{{printf "%12.2f" .StakeSummary.StakeDiff.Estimates.Expected}}</span></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <h4><span>Ticket Fees</span></h4>
        <div class="row">
            <div class="col-md-6">
                <div>Tickets in Mempool: <strong id="mempoolfeeinfo_number">{{.MempoolFeeInfo.Number}}</strong></div>
                <strong>Fees:</strong>
                <table class="table table-sm">
                    <thead>
                        <th>Lowest Minable</th>
                        <th>Min</th>
                        <th>Max</th>
                        <th>Median</th>
                        <th>Mean</th>
                    </thead>
                    <tbody>
                        <tr>
                            <td><span id="mempoolfeeinfo_lowestmineable" >{{printf "%.8f" .MempoolFeeInfo.LowestMineable}}</span></td>
                            <td><span id="mempoolfeeinfo_min" >{{printf "%.8f" .MempoolFeeInfo.Min}}</span></td>
                            <td><span id="mempoolfeeinfo_max" >{{printf "%.8f" .MempoolFeeInfo.Max}}</span></td>
                            <td><span id="mempoolfeeinfo_median" >{{printf "%.8f" .MempoolFeeInfo.Median}}</span></td>
                            <td><span id="mempoolfeeinfo_mean" >{{printf "%.8f" .MempoolFeeInfo.Mean}}</span></td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="col-md-6 text-left">
                <div>Tickets in Lastest Block: <strong id="feeinfo_number">{{.StakeSummary.Feeinfo.Number}}</strong></div>
                <strong>Fees in Last Block:</strong>
                <table class="table table-sm">
                    <thead>
                        <th>Min</th>
                        <th>Max</th>
                        <th>Median</th>
                        <th>Mean</th>
                    </thead>
                    <tbody>
                        <tr>
                            <td><span id="feeinfo_min" >{{printf "%16.6f" .StakeSummary.Feeinfo.Min}}</span></td>
                            <td><span id="feeinfo_max" >{{printf "%16.6f" .StakeSummary.Feeinfo.Max}}</span></td>
                            <td><span id="feeinfo_median" >{{printf "%16.6f" .StakeSummary.Feeinfo.Median}}</span></td>
                            <td><span id="feeinfo_mean" >{{printf "%16.6f" .StakeSummary.Feeinfo.Mean}}</span></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

    </div>
    <!-- end wrapper -->

    {{ template "footer"}}

</body>

</html>
{{end}}